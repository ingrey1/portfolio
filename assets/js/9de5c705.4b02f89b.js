"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[406],{8063:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"weather-widget","metadata":{"permalink":"/portfolio/blog/weather-widget","source":"@site/blog/2022-06-22-weather-widget.mdx","title":"React Weather Widget","description":"ShowWeather React Component","date":"2022-06-22T00:00:00.000Z","formattedDate":"June 22, 2022","tags":[],"readingTime":0.585,"truncated":false,"authors":[{"name":"Jason Mortensen","title":"Technical Writer","url":"https://github.com/ingrey1/portfolio","imageURL":"https://media-exp2.licdn.com/dms/image/C4E03AQFZbme25h0hng/profile-displayphoto-shrink_400_400/0/1633321615286?e=1660780800&v=beta&t=5LlzlM6G6kcaJw9cccQjclGOo3sgt_WqPCC1YroJDTo","key":"jason"}],"frontMatter":{"slug":"weather-widget","title":"React Weather Widget","authors":["jason"]},"nextItem":{"title":"Planning A Feedback Component","permalink":"/portfolio/blog/planning-feedback-component"}},"content":"import CodeBlock from \\"@theme/CodeBlock\\";\\nimport ShowWeather from \\"!!raw-loader!../src/components/ShowWeather/ShowWeather\\"\\nimport About from \\"!!raw-loader!../src/pages/about.mdx\\"\\n\\n\\n### ShowWeather React Component\\n\\n<CodeBlock language=\\"jsx\\" showLines>{ShowWeather}</CodeBlock>\\n\\nI made this component to demonstrate the feasibility of interacting with a live RESTful API to retrieve data and display it on a site generated via Docusaurus. Now that the ShowWeather component is complete, it can be dropped into any React page or .MDX document to display the weather data for the user. This component-based re-usability is part of what has made React such a popular Javascript framework. If you\'d like to check out what using this React component looks like in the context of this Docusaurus portfolio site, review the code for the [About Me](https://raw.githubusercontent.com/ingrey1/portfolio/main/src/pages/about.mdx) [MDX](https://mdxjs.com/docs/what-is-mdx/) page."},{"id":"planning-feedback-component","metadata":{"permalink":"/portfolio/blog/planning-feedback-component","source":"@site/blog/2022-06-21-planning-feedback-component.mdx","title":"Planning A Feedback Component","description":"Introduction","date":"2022-06-21T00:00:00.000Z","formattedDate":"June 21, 2022","tags":[],"readingTime":2.885,"truncated":false,"authors":[{"name":"Jason Mortensen","title":"Technical Writer","url":"https://github.com/ingrey1/portfolio","imageURL":"https://media-exp2.licdn.com/dms/image/C4E03AQFZbme25h0hng/profile-displayphoto-shrink_400_400/0/1633321615286?e=1660780800&v=beta&t=5LlzlM6G6kcaJw9cccQjclGOo3sgt_WqPCC1YroJDTo","key":"jason"}],"frontMatter":{"slug":"planning-feedback-component","title":"Planning A Feedback Component","authors":["jason"]},"prevItem":{"title":"React Weather Widget","permalink":"/portfolio/blog/weather-widget"},"nextItem":{"title":"Welcome To My Blog","permalink":"/portfolio/blog/welcome-blog-post"}},"content":"import TOCInline from \'@theme/TOCInline\';\\nimport TextboxFeedbackModel from \\"@site/src/components/TextboxFeedbackModel\\"\\nimport ClickFeedbackModel from \\"@site/src/components/ClickFeedbackModel\\"\\nimport ThanksFeedbackModel from \\"@site/src/components/ThanksFeedbackModel\\"\\n\\n\\n<TOCInline toc={toc} />\\n\\n## Introduction\\n\\nAn important part of improving the quality of online documentation involves soliciting feedback from the primary users of that documentation. One mechanism that can be used to acquire helpful feedback is a feedback component.\\n\\nBy placing a feedback component on each documentation page, it\'s possible to collect page-level feedback with minimal effort, once the initial component setup is complete.\\n\\nWhile the basic concepts behind the feedback component are technology agnostic, the implementation details will vary depending on the tech stack used to generate the online documentation. In this series of blog posts, I will explain how to create a custom React feedback component that can be used in any Docusaurus-generated documentation suite. \\n\\n## Feedback Component Design\\n\\n### Type Of User Feedback Collected\\n\\nThe purpose of the Feedback component is to collect relevant information about the user\'s experience with a given documentation page. Ideally, we want to know not only that a user had a positive, neutral, or negative experience, but also why that user had the particular experience they did. Let\'s consider two approaches to capturing user feedback, and then we can evaluate their pros and cons.\\n\\n- **The Textbox Feedback Model**\\n\\n  <TextboxFeedbackModel />\\n\\n  - **Advantages**\\n    - Text feedback can provide more detailed insights into user behavior and satisfaction\\n    - More likely to receive feedback that is actionable\\n  - **Disadvantages**\\n    - Users are more likely to provide feedback if they don\'t have to type anything\\n    - Depending on context, volume of feedback may be too low to draw meaningful conclusions\\n\\n- **The Like/Neutral/Dislike Feedback Model**\\n\\n  <ClickFeedbackModel />\\n\\n  - **Advantages**\\n    - Low barrier to use: users are more likely to click an emoji than type text\\n  - **Disadvantages**\\n    - Feedback may have limited use because of a lack of information about why users like or dislike the page \\n\\nBoth models have their strengths. The textbox approach will be more likely to provide actionable insights, while the button/emoji approach will generate a larger volume of responses. Depending on the specific context of your documentation project, one of these models may be more suitable than the other.\\n\\nHowever, it would be nice if we could leverage the strengths of both approaches for our Feedback component. Fortunately--although a little bit more complicated from an implementation perspective--we can have our Feedback component utilize a hybrid model by introducing three different feedback states/modes. Depending on which state the Feedback component happens to be in, the component will display something different for the user.   \\n\\n\\n| User View                | Component State     | Step # |\\n|--------------------------|---------------------|--------|\\n| <ClickFeedbackModel />   | **Click Emoji**     | 1      |\\n| <TextboxFeedbackModel /> | **Enter Text**      | 2      |\\n| <ThanksFeedbackModel />  | **Thank User**      | 3      |\\n\\n- **When a user views the Feedback box for the first time, they will see the like/neutral/dislike Emojis**\\n- **If the user chooses to click an emoji, that data will be saved, and the emoji box will be replaced with the textbox**\\n- **If the user chooses to submit a comment, the comment box will be replaced with a \\"Thank You\\" message.**\\n\\nOn this approach, the Feedback component shows the \\"Click Emoji\\" view first. Why? If the textbox were first, we would lose the user feedback for those who will click something, but not comment. This way, we get all the clickers--and the more motivated commenters will click, and then comment."},{"id":"welcome-blog-post","metadata":{"permalink":"/portfolio/blog/welcome-blog-post","source":"@site/blog/2022-06-15-welcome.mdx","title":"Welcome To My Blog","description":"Welcome To My Blog. =)","date":"2022-06-15T00:00:00.000Z","formattedDate":"June 15, 2022","tags":[{"label":"docusaurus","permalink":"/portfolio/blog/tags/docusaurus"}],"readingTime":0.025,"truncated":false,"authors":[{"name":"Jason Mortensen","title":"Technical Writer","url":"https://github.com/ingrey1/portfolio","imageURL":"https://media-exp2.licdn.com/dms/image/C4E03AQFZbme25h0hng/profile-displayphoto-shrink_400_400/0/1633321615286?e=1660780800&v=beta&t=5LlzlM6G6kcaJw9cccQjclGOo3sgt_WqPCC1YroJDTo","key":"jason"}],"frontMatter":{"slug":"welcome-blog-post","title":"Welcome To My Blog","authors":["jason"],"tags":["docusaurus"]},"prevItem":{"title":"Planning A Feedback Component","permalink":"/portfolio/blog/planning-feedback-component"}},"content":"Welcome To My Blog. =)"}]}')}}]);